// Generated by CoffeeScript 1.3.3
(function() {

  $.fn.splitToLines = function(options) {
    var $source, chunk_lines, elements, groups, line_words, lines, source, split_to_elements, word, _i, _j, _len, _len1, _line,
      _this = this;
    if (options == null) {
      options = {};
    }
    split_to_elements = function(copy, options) {
      var html, items, separator, tagName;
      if (options == null) {
        options = {};
      }
      separator = options.separator || " ";
      tagName = options.tagName || "span";
      if (_this.data("source")) {
        _this.html(_this.data("source"));
      } else {
        _this.data("source", _this.html());
      }
      html = "";
      items = $(".source").html().split(separator);
      _.each(items, function(word, i) {
        var spacer;
        spacer = i < items.length - 1 ? " " : "";
        return html += "<" + tagName + ">" + word + spacer + "</" + tagName + ">";
      });
      return html;
    };
    source = options.source || ".source";
    $source = $(".source");
    log($source);
    elements = split_to_elements($source.html(), options);
    elements = $(this).html(elements).children();
    groups = _.groupBy(elements, function(element) {
      return $(element).offset().top;
    });
    chunk_lines = _.toArray(groups);
    lines = [];
    for (_i = 0, _len = chunk_lines.length; _i < _len; _i++) {
      _line = chunk_lines[_i];
      line_words = "";
      for (_j = 0, _len1 = _line.length; _j < _len1; _j++) {
        word = _line[_j];
        line_words += word.innerHTML;
      }
      lines.push("<div class='line'>" + line_words + "</div>");
    }
    $(this).html(lines);
    return this;
  };

  $.fn.animateLines = function(options) {
    var tl,
      _this = this;
    if (options == null) {
      options = {};
    }
    options.duration = .3;
    options.stagger || (options.stagger = 0.3);
    options.css || (options.css = {});
    options.delay = .02;
    $(".line").each(function(i, line) {
      return $(line).css({
        position: "absolute",
        top: i * $(line).height()
      });
    });
    tl = new TimelineMax({
      onComplete: options.onComplete
    });
    tl.stop();
    tl.staggerFrom($(".line"), .4, {
      css: options.css,
      ease: options.ease
    }, options.stagger);
    if (options.autoplay) {
      tl.play();
    }
    return this;
  };

}).call(this);
